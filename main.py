import tkinter as tk
from tkinter import filedialog, ttk
import vlc
import os
import platform

class MediaPlayer:
    def __init__(self, root):
        self.root = root
        self.root.title("VibeCast")
        root.iconbitmap(default="favicon.ico")
        self.root.geometry("1024x768")  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.root.state('zoomed')  # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VLC
        self.instance = vlc.Instance()
        self.player = self.instance.media_player_new()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.is_playing = False
        self.is_paused = False
        self.current_media = None
        self.playlist = []
        self.current_playlist_index = -1
        self.repeat = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_ui()
        
    def create_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º –¥–ª—è –≤–∏–¥–µ–æ (–∑–∞–Ω–∏–º–∞–µ—Ç 80% –≤—ã—Å–æ—Ç—ã –æ–∫–Ω–∞)
        self.video_frame = tk.Frame(self.root, bg='black')
        self.video_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_panel = tk.Frame(self.root)
        control_panel.pack(fill=tk.X, side=tk.BOTTOM, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å –ø–∞–Ω–µ–ª–∏ (–∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        left_control = tk.Frame(control_panel)
        left_control.pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ)
        btn_width = 8
        btn_font = ('Arial', 10)
        
        self.play_btn = tk.Button(left_control, text="‚ñ∂ –ò–≥—Ä–∞—Ç—å", width=btn_width, 
                                 font=btn_font, command=self.play)
        self.play_btn.pack(side=tk.LEFT, padx=2)
        
        self.pause_btn = tk.Button(left_control, text="‚è∏ –ü–∞—É–∑–∞", width=btn_width, 
                                  font=btn_font, command=self.pause)
        self.pause_btn.pack(side=tk.LEFT, padx=2)
        
        self.stop_btn = tk.Button(left_control, text="‚èπ –°—Ç–æ–ø", width=btn_width, 
                                 font=btn_font, command=self.stop)
        self.stop_btn.pack(side=tk.LEFT, padx=2)
        
        self.repeat_btn = tk.Button(left_control, text="üîÅ –ü–æ–≤—Ç–æ—Ä", width=btn_width, 
                                   font=btn_font, command=self.toggle_repeat)
        self.repeat_btn.pack(side=tk.LEFT, padx=2)
        
        self.open_btn = tk.Button(left_control, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å", width=btn_width, 
                                 font=btn_font, command=self.open_file)
        self.open_btn.pack(side=tk.LEFT, padx=2)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å –ø–∞–Ω–µ–ª–∏ (–≥—Ä–æ–º–∫–æ—Å—Ç—å)
        right_control = tk.Frame(control_panel)
        right_control.pack(side=tk.RIGHT)
        
        # –†–µ–≥—É–ª—è—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π)
        self.volume_label = tk.Label(right_control, text="üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å", font=btn_font)
        self.volume_label.pack(side=tk.LEFT)
        
        self.volume_slider = ttk.Scale(right_control, from_=0, to=100, orient=tk.HORIZONTAL, 
                                     command=self.set_volume, length=150)
        self.volume_slider.set(100)
        self.volume_slider.pack(side=tk.LEFT, padx=5)
        
        # –ú–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç)
        self.current_file_label = tk.Label(self.root, text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", 
                                         anchor='w', font=('Arial', 10))
        self.current_file_label.pack(fill=tk.X, side=tk.BOTTOM, before=control_panel)
        
        # –ü–ª–µ–π–ª–∏—Å—Ç (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π, –ø–æ–¥ –≤–∏–¥–µ–æ)
        self.playlist_box = tk.Listbox(self.root, height=6, font=('Arial', 10))
        self.playlist_box.pack(fill=tk.BOTH, before=self.current_file_label)
        self.playlist_box.bind('<<ListboxSelect>>', self.playlist_select)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.player.audio_set_volume(100)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        self.root.after(100, self.set_vlc_window)
    
    def set_vlc_window(self):
        if platform.system() == 'Windows':
            self.player.set_hwnd(self.video_frame.winfo_id())
        else:
            self.player.set_xwindow(self.video_frame.winfo_id())
    
    def play(self):
        if not self.is_playing and self.playlist:
            if self.current_playlist_index == -1:
                self.play_media(0)
            else:
                self.player.play()
                self.is_playing = True
                self.is_paused = False
        elif self.is_paused:
            self.player.play()
            self.is_paused = False
            self.is_playing = True
    
    def pause(self):
        if self.is_playing and not self.is_paused:
            self.player.pause()
            self.is_paused = True
            self.is_playing = False
    
    def stop(self):
        if self.is_playing or self.is_paused:
            self.player.stop()
            self.is_playing = False
            self.is_paused = False
    
    def toggle_repeat(self):
        self.repeat = not self.repeat
        if self.repeat:
            self.repeat_btn.config(relief=tk.SUNKEN, bg='#d9d9d9')
        else:
            self.repeat_btn.config(relief=tk.RAISED, bg='SystemButtonFace')
    
    def set_volume(self, volume):
        self.player.audio_set_volume(int(float(volume)))
    
    def open_file(self):
        filetypes = [
            ("–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã", "*.mp3 *.mp4 *.avi *.mkv *.mov *.wmv *.flv *.m3u *.m3u8"),
            ("–ü–ª–µ–π–ª–∏—Å—Ç—ã", "*.m3u *.m3u8"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
        ]
        
        filenames = filedialog.askopenfilenames(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç", 
                                              filetypes=filetypes)
        
        if filenames:
            if filenames[0].lower().endswith(('.m3u', '.m3u8')):
                self.load_playlist(filenames[0])
            else:
                self.playlist = list(filenames)
                self.update_playlist_box()
                self.play_media(0)
    
    def load_playlist(self, playlist_path):
        try:
            with open(playlist_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            self.playlist = []
            for line in lines:
                line = line.strip()
                if not line.startswith('#') and line:
                    if not os.path.isabs(line):
                        playlist_dir = os.path.dirname(playlist_path)
                        line = os.path.join(playlist_dir, line)
                    self.playlist.append(line)
            
            if self.playlist:
                self.update_playlist_box()
                self.play_media(0)
            else:
                self.current_file_label.config(text="–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç")
        except Exception as e:
            self.current_file_label.config(text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    
    def update_playlist_box(self):
        self.playlist_box.delete(0, tk.END)
        for item in self.playlist:
            name = os.path.basename(item)
            self.playlist_box.insert(tk.END, name[:40] + "..." if len(name) > 40 else name)
    
    def play_media(self, index):
        if 0 <= index < len(self.playlist):
            media_path = self.playlist[index]
            self.current_media = self.instance.media_new(media_path)
            self.player.set_media(self.current_media)
            
            self.player.play()
            self.is_playing = True
            self.is_paused = False
            self.current_playlist_index = index
            name = os.path.basename(media_path)
            self.current_file_label.config(text=f"–°–µ–π—á–∞—Å: {name[:50]}{'...' if len(name) > 50 else ''}")
            
            self.playlist_box.selection_clear(0, tk.END)
            self.playlist_box.selection_set(index)
            self.playlist_box.see(index)
            
            self.root.after(1000, self.check_end_of_media)
    
    def playlist_select(self, event):
        if not self.playlist_box.curselection():
            return
        
        index = self.playlist_box.curselection()[0]
        if index != self.current_playlist_index:
            self.play_media(index)
    
    def check_end_of_media(self):
        if self.is_playing:
            state = self.player.get_state()
            
            if state == vlc.State.Ended:
                self.is_playing = False
                
                if self.repeat:
                    self.play_media(self.current_playlist_index)
                elif self.current_playlist_index + 1 < len(self.playlist):
                    self.play_media(self.current_playlist_index + 1)
                else:
                    self.current_file_label.config(text="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            self.root.after(1000, self.check_end_of_media)

if __name__ == "__main__":
    root = tk.Tk()
    player = MediaPlayer(root)
    root.mainloop()